Current Multiclient (Adidas)

DataCompliance_Init Class
	
	Get the Validation_Flow 
		DataCompliance_ValidateFlow Class
			tValidatedFlow := Using SQL_execute usp_Get_ValidationFlowConfig sproc
	
	Get the TransType -> tTransType :=  using SQL_execute from TransType table
	
	If No TransType derived then tTransType := 'Default_TransType'
	
	If tTransType is 'Default_TransType' then TransTypeIsNoneFlag is True
	
	Get the ReqDataPerTransType -> tReqDataList := SQL_execute from ReqDataPerTransType table
	
	Start Check Fb and Inv level
		DataCompliance_MissingDataFbInv Class
			Get the DataFields -> tDataElemList := SQL_execute from DataElemsToCheck table
			Get the DataFields and DataConditions -> tDataStateCollection := SQL_execute from DataConditionPerValidationFlow			
			Count the DataFields + header (1) -> DataElemCnt := List_Cnt(replace(tDataElemList,'�', ''),'[]')
			Set DataCounter to 1 to be used in 
			DataCompliance_CheckDataFields Class (do_while DataElemCnt - 1)
				Check Fb and Inv DataFields in tDataElemList if it is Missing or Not
					If Missing {null, empty} -> tMissingList := Rules_Eval(per DataField)
			Return the DataFields that is Missing per Rules_Eval -> tMissingData := tMissingList
			Count the Missing DataFields -> MissingDataCnt := List_Cnt(tMissingData , '[]')
			DataCompliance_MissingData_Validate Class (do_while MissingDataCnt)
				Check the DataFields if it is in the tReqDataList
					If it's in tReqDataList then IsRequiredFlag is True
				Check tDataStateCollection if not empty
					If not empty then CollectionNotEmpty is True
				Check if the DataField validated is in the tDataStateCollection
					If it's in tDataStateCollection then IsDataFieldPresent is True
				Get the DataCondition of the DataFields in tDataStateCollection list-> tDataState := Using collection_cell(tDataStateCollectionField,1,2)
				Calling the M# for the metrics to persist
					dataResult := If there's TransType derived then IsRequiredFlag requires to be True 
					dataResult := If there's NO TransType derived (TransTypeIsNoneFlag is True) then no need for IsRequiredFlag to be true.
					This means that all Missing DataFields will be persisted in the metrics.
	Start Check Lineitem level	
		DatCompliance_MissingDataLineItem Class
			Get the DataFields -> tDataElemList_LnItems := SQL_execute from DataElemsToCheck table
			Count the DataFields + header (1) -> DataElemCnt_LnItems := List_Cnt(replace(tDataElemList_LnItems,'�', ''),'[]')
			Set DataCounter to 1 to be used in
			DataCompliance_CheckDataFields_LnItems Class (do_while DataElemCnt_LnItems - 1)
				Loop LineItems to Check LineItem DataFields in tDataElemList if it is Missing or Not
					DataCompliance_CheckDataFields_LoopLnItem Class
					If Missing {null, empty} -> tMissingList_LnItems := Rules_Eval(per DataField)
			Return the DataFields that is Missing per Rules_Eval -> tMissingData_LnItems := tMissingList_LnItems
			Count the Missing DataFields -> MissingDataCnt_lnItems := List_Cnt( tMissingData_LnItems , '[]' )
			DataCompliance_MissingData_Validate_LnItems Class (do_while MissingDataCnt_lnItems)
				Check the DataFields if it is in the tReqDataList
					If it's in tReqDataList then IsRequiredFlag is True
				Check tDataStateCollection if not empty
					If not empty then LineCollectionNotEmpty is True
				Check if the DataField validated is in the tDataStateCollection
					If it's in tDataStateCollection then IsLineDataFieldPresent is True
				Get the DataCondition of the DataFields in tDataStateCollection list-> tDataStateLnItems := Using collection_cell(tDataStateCollectionField,1,2)
				Calling the M# for the metrics to persist
					dataResult := If there's TransType derived then IsRequiredFlag requires to be True 
					dataResult := If there's NO TransType derived (TransTypeIsNoneFlag is True) then no need for IsRequiredFlag to be true.
					This means that all Missing DataFields will be persisted in the metrics.
	Apply Denial in Fb and Inv level
		Do query in ViewFlatDataMetricLatestObj for InvalidMissing DataFields
			Get the friendly name of each InvalidMissing Datafields in DataCompliance_MissingData_Equiv Class
			tEquivList := list of the InvalidMissing Datafields' friendly name
		tMissingDataList := is the list of all the InvalidMissing Datafields' friendly name

